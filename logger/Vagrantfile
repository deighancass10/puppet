# -*- mode: ruby -*-
# vi: set ft=ruby :

$docker = <<-SCRIPT
sudo -i
apt-get install apt-transport-https ca-certificates curl software-properties-common -y
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt install docker-ce -y
SCRIPT

$puppet = <<-SCRIPT
echo 172.31.0.10 puppet >> /etc/hosts
sudo wget http://apt.puppetlabs.com/puppetlabs-release-trusty.deb
sudo dpkg -i puppetlabs-release-trusty.deb
sudo apt-get update
sudo apt-get install puppet -y
sudo sed -i '/\\[main\\]/ a certname = logger\\nserver = puppet\\nenvironment = production\\nruninterval = 1m' /etc/puppet/puppet.conf
sudo systemctl start puppet
sudo systemctl enable puppet
SCRIPT

$grafana = <<-SCRIPT
docker run -d --restart always --name=grafana -p 3000:3000 grafana/grafana

sudo apt install nginx -y
cd /etc/nginx/sites-available
sudo rm default ../sites-enabled/default

echo 'upstream grafana_server {
  server 127.0.0.1:3000 fail_timeout=0;
}

server {
  listen 80;
  listen [::]:80 default ipv6only=on;
  server_name logger;

  location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_redirect off;

      if (!-f $request_filename) {
          proxy_pass http://grafana_server;
          break;
      }
  }
}' >> grafana

sudo ln -s /etc/nginx/sites-available/grafana /etc/nginx/sites-enabled/

sudo service nginx restart
SCRIPT


$prometheus = <<-SCRIPT
sudo -i
cd ~
curl -LO https://github.com/prometheus/prometheus/releases/download/v2.18.1/prometheus-2.18.1.linux-amd64.tar.gz
useradd --no-create-home --shell /bin/false prometheus
mkdir /etc/prometheus && chown prometheus:prometheus /etc/prometheus
mkdir /var/lib/prometheus && chown prometheus:prometheus /var/lib/prometheus

mkdir prometheus-files && tar -xvf prometheus-2.18.1.linux-amd64.tar.gz -C prometheus-files --strip-components 1

cp prometheus-files/prometheus /usr/local/bin/ && chown prometheus:prometheus /usr/local/bin/prometheus
cp prometheus-files/promtool /usr/local/bin/ && chown prometheus:prometheus /usr/local/bin/promtool

cp -r prometheus-files/consoles /etc/prometheus && chown -R prometheus:prometheus /etc/prometheus/consoles
cp -r prometheus-files/console_libraries /etc/prometheus && sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries

mv /home/vagrant/prometheus.yml /etc/prometheus/prometheus.yml
chown prometheus:prometheus /etc/prometheus/prometheus.yml

mv /home/vagrant/prometheus.service /etc/systemd/system/prometheus.service

systemctl daemon-reload
systemctl start prometheus
SCRIPT

# To get the intial admin password, connect to the VM and use:
# sudo cat /var/lib/docker/volumes/nexus-data/_data/admin.password

Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/bionic64"

  config.vm.define "logger" do |logger|
    logger.vm.hostname = "logger"
    logger.vm.network "private_network", ip: "172.31.0.11"
    logger.vm.provision "file", source: "prometheus.yml", destination: "/home/vagrant/prometheus.yml"
    logger.vm.provision "file", source: "prometheus.service", destination: "/home/vagrant/prometheus.service"
    logger.vm.provision "shell", inline: $docker
    logger.vm.provision "shell", inline: $puppet
    logger.vm.provision "shell", inline: $grafana
    logger.vm.provision "shell", inline: $prometheus
  end

  config.vm.provider :virtualbox do |p|
    p.gui = false
    p.customize ["modifyvm", :id, "--memory", 2048]
    p.customize ["modifyvm", :id, "--cpus", 1]
  end

end

# docker volume create --name nexus-data
# docker run -d --restart always -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3

